name: 'Auto PR Title Formatter'
description: 'Automatically formats PR titles based on branch naming convention'
branding:
  icon: 'tag'
  color: 'yellow'

inputs:
  github_token:
    description: 'GitHub token for API access'
    required: false
    default: ${{ github.token }}
  additional_types:
    description: 'Additional branch types as JSON object (e.g. {"perf": "Performance", "test": "Test"})'
    required: false
    default: '{}'

runs:
  using: 'composite'
  steps:
    - uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const pr = context.payload.pull_request;
          const branch = pr.head.ref;

          // Parse additional types
          let additionalTypes = {};
          try {
            additionalTypes = JSON.parse('${{ inputs.additional_types }}');
          } catch (e) {
            core.warning('Invalid additional_types JSON, using empty object');
          }

          // Default type mapping
          const DEFAULT_TYPES = {
            feature: "Feature", feat: "Feature",
            fix: "Fix", hotfix: "Fix", quickfix: "Fix", patch: "Fix",
            bug: "Bug", bugfix: "Bug",
            experiment: "Experiment", exp: "Experiment",
            chore: "Chore", maintenance: "Chore", maint: "Chore",
            docs: "Docs", doc: "Docs",
            refactor: "Refactor", refac: "Refactor"
          };

          // Merge default and additional types
          const TYPE_MAP = { ...DEFAULT_TYPES, ...additionalTypes };

          // Special handling for release branches
          if (branch.startsWith('release/')) {
            const comment = `üöÄ **Release Branch Detected**

This PR appears to be from a release branch (\`${branch}\`). Please ensure this is intentional and follows your release process.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: comment
            });
            return;
          }

          // Match branch: type/EMBR-1234-slug
          const m = branch.match(/^([^/]+)\/(EMBR-\d+)(?:[-_].*)?$/i);
          if (!m) {
            const availableTypes = Object.keys(TYPE_MAP).join(', ');
            const comment = `‚ö†Ô∏è **Branch Naming Issue**

The branch \`${branch}\` doesn't match the expected pattern: \`type/EMBR-XXXX-description\`

**Expected format:** \`type/EMBR-1234-your-feature-description\`
**Available types:** ${availableTypes}

**Examples:**
- \`feature/EMBR-1234-new-login-form\`
- \`fix/EMBR-5678-authentication-bug\`
- \`docs/EMBR-9999-update-readme\``;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: comment
            });
            return;
          }

          const typeKey = m[1].toLowerCase();
          const ticket  = m[2].toUpperCase();

          const Type = TYPE_MAP[typeKey];
          if (!Type) {
            const availableTypes = Object.keys(TYPE_MAP).join(', ');
            const comment = `‚ùå **Unknown Branch Type**

The branch type \`${typeKey}\` is not recognized.

**Available types:** ${availableTypes}

Please rename your branch to use one of the supported types.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: comment
            });
            return;
          }

          const desiredPrefix = `[${ticket}] ${Type}: `;

          if (!pr.title.startsWith(desiredPrefix)) {
            const newTitle = desiredPrefix + pr.title;
            core.info(`Actualizando PR title ‚Üí ${newTitle}`);
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              title: newTitle
            });
          } else {
            core.info("PR title ya tiene el prefijo correcto.");
          }